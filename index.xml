<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Archive | Lyin's Room on</title><link>https://c.gregueria.icu/</link><description>Recent content in Archive | Lyin's Room on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://c.gregueria.icu/index.xml" rel="self" type="application/rss+xml"/><item><title>Setup</title><link>https://c.gregueria.icu/notes/setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://c.gregueria.icu/notes/setup/</guid><description>Making your own Quartz Setting up Quartz requires a basic understanding of git. If you are unfamiliar, this resource is a great place to start!
Forking A fork is a copy of a repository. Forking a repository allows you to freely experiment with changes without affecting the original project.</description></item><item><title>Editing Content in Quartz</title><link>https://c.gregueria.icu/notes/editing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://c.gregueria.icu/notes/editing/</guid><description>Editing Quartz runs on top of Hugo so all notes are written in Markdown.
Folder Structure Here&amp;rsquo;s a rough overview of what&amp;rsquo;s what.
All content in your garden can found in the /content folder. To make edits, you can open any of the files and make changes directly and save it.</description></item><item><title>Obsidian Vault Integration</title><link>https://c.gregueria.icu/notes/obsidian/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://c.gregueria.icu/notes/obsidian/</guid><description>Setup Obsidian is the preferred way to use Quartz. You can either create a new Obsidian Vault or link one that your already have.
New Vault If you don&amp;rsquo;t have an existing Vault, download Obsidian and create a new Vault in the /content folder that you created and cloned during the setup step.</description></item><item><title>Preview Changes</title><link>https://c.gregueria.icu/notes/preview-changes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://c.gregueria.icu/notes/preview-changes/</guid><description>If you&amp;rsquo;d like to preview what your Quartz site looks like before deploying it to the internet, here&amp;rsquo;s exactly how to do that!
Note that both of these steps need to be completed.
Install hugo-obsidian This step will generate the list of backlinks for Hugo to parse.</description></item><item><title>Deploying Quartz to the Web</title><link>https://c.gregueria.icu/notes/hosting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://c.gregueria.icu/notes/hosting/</guid><description>Hosting on GitHub Pages Quartz is designed to be effortless to deploy. If you forked and cloned Quartz directly from the repository, everything should already be good to go! Follow the steps below.
Enable GitHub Actions By default, GitHub disables workflows from running automatically on Forked Repostories.</description></item><item><title/><link>https://c.gregueria.icu/%EF%B8%8Frandom-notes/%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%E7%9A%84%E4%B8%80%E4%BA%9B%E9%80%9A%E7%94%A8%E8%A7%84%E5%88%99/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://c.gregueria.icu/%EF%B8%8Frandom-notes/%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%E7%9A%84%E4%B8%80%E4%BA%9B%E9%80%9A%E7%94%A8%E8%A7%84%E5%88%99/</guid><description>文件路径的一些通用规则：
若引用的目标文件与 HTML 文件同级，只需直接使用文件名，例如：my-image.jpg。 要引用子目录中的文件，请在路径前面写上目录名，再加上一个正斜杠。例如：subdirectory/my-image.jpg。 若引用的目标文件位于 HTML 文件的上级，需要加上两个点。举个例子，如果 index.html 在 test-site 的一个子文件夹内，而 my-image.jpg 在 test-site 内，你可以使用../my-image.jpg 从 index.html 引用 my-image.jpg。 以上方法可以随意组合，比如：../subdirectory/another-subdirectory/my-image.jpg。 备注： Windows 的文件系统使用反斜杠而不是正斜杠，例如：C:\Windows。这在 HTML 中并不重要——即使你在 Windows 系统上进行开发，你也应该在代码中使用正斜杠。</description></item><item><title>Array 数组</title><link>https://c.gregueria.icu/%EF%B8%8Frandom-notes/Array-%E6%95%B0%E7%BB%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://c.gregueria.icu/%EF%B8%8Frandom-notes/Array-%E6%95%B0%E7%BB%84/</guid><description>Array.push('') 加一个元素在数组的末尾。同时它可以返回一些数值：它返回的数值是新数组的长度。 1 2 3 const friends = [&amp;#39;tim&amp;#39;, &amp;#39;allen&amp;#39;, &amp;#39;bob&amp;#39;] const newLength = friends.push(&amp;#39;kim&amp;#39;) console.log(newLength) // 4 Array.unshift('') 添加一个元素在数组的开头。同样返回新数组的长度。 Array.pop('') 删除数组最后一个元素，返回被删除的值 Array.shift('') 删除数组第一个元素，并返回被删除的值 Array.</description></item><item><title>Block area 块作用域</title><link>https://c.gregueria.icu/%EF%B8%8Frandom-notes/Block-area-%E5%9D%97%E4%BD%9C%E7%94%A8%E5%9F%9F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://c.gregueria.icu/%EF%B8%8Frandom-notes/Block-area-%E5%9D%97%E4%BD%9C%E7%94%A8%E5%9F%9F/</guid><description>在 ES5 中规定，函数只能在顶层作用域和函数作用域之中声明，不能在块级作用域声明。而在 ES6 中引入了块级作用域，允许函数可以在块级作用域中声明。块级作用域之中，函数声明语句的行为类似于 let，在块级作用域之外不可引用。 通过var声明的变量或者非严格模式下 (non-strict mode) 创建的函数声明没有块级作用域。 相比之下，使用 let和 const声明的变量是有块级作用域的。 示例： 1 2 3 4 5 let x = 1; { let x = 2; } console.log(x); // 输出 1 x = 2仅限在定义它的块中，const的结果也是一样的。</description></item><item><title>Callouts</title><link>https://c.gregueria.icu/notes/callouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://c.gregueria.icu/notes/callouts/</guid><description>Callout support Quartz supports the same Admonition-callout syntax as Obsidian.
This includes
12 Distinct callout types (each with several aliases) Collapsable callouts See documentation on supported types and syntax here.
Showcase [!EXAMPLE] Examples
Aliases: example
[!</description></item><item><title>CJK + Latex Support (测试)</title><link>https://c.gregueria.icu/notes/CJK-+-Latex-Support-%E6%B5%8B%E8%AF%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://c.gregueria.icu/notes/CJK-+-Latex-Support-%E6%B5%8B%E8%AF%95/</guid><description>Chinese, Japanese, Korean Support 几乎在我们意识到之前，我们已经离开了地面。
우리가 그것을 알기도 전에 우리는 땅을 떠났습니다.
私たちがそれを知るほぼ前に、私たちは地面を離れていました。
Latex Block math works with two dollar signs $$...$$
$$f(x) = \int_{-\infty}^\infty f\hat(\xi),e^{2 \pi i \xi x} ,d\xi$$
Inline math also works with single dollar signs $...$. For example, Euler&amp;rsquo;s identity but inline: $e^{i\pi} = 0$</description></item><item><title>Configuration</title><link>https://c.gregueria.icu/notes/config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://c.gregueria.icu/notes/config/</guid><description>Configuration Quartz is designed to be extremely configurable. You can find the bulk of the configuration scattered throughout the repository depending on how in-depth you&amp;rsquo;d like to get.
The majority of configuration can be found under data/config.yaml. An annotated example configuration is shown below.</description></item><item><title>Custom Domain</title><link>https://c.gregueria.icu/notes/custom-Domain/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://c.gregueria.icu/notes/custom-Domain/</guid><description>Registrar This step is only applicable if you are using a custom domain! If you are using a &amp;lt;YOUR-USERNAME&amp;gt;.github.io domain, you can skip this step.
For this last bit to take effect, you also need to create a CNAME record with the DNS provider you register your domain with (i.</description></item><item><title>Function 函数</title><link>https://c.gregueria.icu/%EF%B8%8Frandom-notes/Function-%E5%87%BD%E6%95%B0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://c.gregueria.icu/%EF%B8%8Frandom-notes/Function-%E5%87%BD%E6%95%B0/</guid><description>什么是函数 函数：封装了一段可被重复调用执行的代码块。通过此代码块可以实现大量代码的重复使用。 封装：吧一个或多个功能通过函数的方式封装起来，对外只提供一个简单的函数接口。 1 2 3 4 5 6 //声明函数 function 函数名(参数1, 参数2) { //函数体 } //调用函数 函数名(参数1, 参数2) age is the variable to save returned value(function output)
函数声明 1 function fnName () {…}; 使用function关键字声明一个函数，再指定一个函数名，叫函数声明。</description></item><item><title>H5(Html5)+CSS3：P1-200</title><link>https://c.gregueria.icu/%EF%B8%8Frandom-notes/H5Html5+CSS3P1-200/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://c.gregueria.icu/%EF%B8%8Frandom-notes/H5Html5+CSS3P1-200/</guid><description>创建实线 ⏰Created Time：2022年8月5日 ✅Origin： 使用 CSS 渐变 - CSS（层叠样式表） | MDN
要在两种颜色之间创建一条硬线，即创建一个条纹而不是逐渐过渡，可以将相邻的颜色停止设置为相同的位置。在此示例中，两种颜色在 50% 标记处共享一个颜色停止点，即渐变的一半：
1 2 3 .striped { background: linear-gradient(to bottom left, cyan 50%, palegoldenrod 50%); } 显示效果
用这个修改了Obsidian的各级Header背景色，比如： 1 background: linear-gradient(to bottom, transparent 50%, pink 50%); boarder-collapse 合并表格边缘线</description></item><item><title>H5(Html5)+CSS3：P200-P275</title><link>https://c.gregueria.icu/%EF%B8%8Frandom-notes/H5Html5+CSS3P200-P275/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://c.gregueria.icu/%EF%B8%8Frandom-notes/H5Html5+CSS3P200-P275/</guid><description>学成在线案例 导航栏 实际开发中我们不会直接使用链接a，而是使用li包含链接（li+a）的做法。 li+a语义更加清晰，一看就是有条理的列表型内容 如果直接使用a，搜索引擎容易识别为有堆砌关键字嫌疑，从而影响网站排名 B站的导航栏就是用li+a实现的 让nav中的连接横向显示 让nav中的li向左浮动 让inline的a显示为block/inline-block，成为一个盒子 a链接字数不一样多所以不方便给宽，所以可以用padding Banner 只有当li设定了宽度，设定padding值时才会撑开盒子
图片垂直居中 1 2 3 4 .user img { vertical-align:middle; margin-right: 10px; } 定位 Static 静态定位 默认 相对定位relative {position: relative;} 相对定位是元素在移动位置的时候，相对于它原来的位置 原来在标准流占有的位置继续占有，后面的盒子仍然以标准流方式来对待它。不脱标，继续保留原来位置。 绝对定位 absolute position: absolute; 相对于它的祖先元素而言的。 如果没有祖先元素或者祖先元素没有定位，则以浏览器为准定位（Document文档）。 只要祖先元素有定位（绝对、相对、固定）则以最近一级的有定位的祖先元素为参考点移动位置。 脱标，不再占有原来的位置。 fixed 固定定位 它是一种特殊的绝对（absolute）定位，将元素相对于浏览器窗口定位。 类似于绝对位置，它与 CSS 偏移属性一起使用，并且也会将元素从当前的文档流里面移除。 其它元素会忽略它的存在，这样也许需要调整其他位置的布局。 但 fixed 和 absolute 的最明显的区别在于，前者定位的元素不会随着屏幕滚动而移动。 不会占有位置。 还可以跟版心右侧位置。 让固定盒子left: 50%;走到中间位置，让margin-left: 版心宽度的一半距离。 sticky 粘性定位 以浏览器的可视窗口为参照点移动元素 占有原先位置 必须添加top left right bottom任意一个才能起效果，如果top为0.</description></item><item><title>H5(Html5)+CSS3：P275-</title><link>https://c.gregueria.icu/%EF%B8%8Frandom-notes/H5Html5+CSS3P275-/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://c.gregueria.icu/%EF%B8%8Frandom-notes/H5Html5+CSS3P275-/</guid><description>HTML5 新特性 增加了一些新的表单、新的标签和新的表单属性。新特性都有兼容性问题，IE9+以上版本的浏览器才支持，不考虑兼容性可以大量使用这些新特性。 新增的语义化标签 div队与搜索引擎来说，是没有语义的。HTML5新增的语义化标签有： &amp;lt;header&amp;gt; &amp;lt;nav&amp;gt; &amp;lt;article&amp;gt;内容标签 &amp;lt;section&amp;gt;定义文档某个区域 &amp;lt;aside&amp;gt;侧边栏标签 &amp;lt;footer&amp;gt; CSS3新特性 属性选择器 可以跟据元素特定属性来选择元素。 类选择器、属性选择器、伪类选择器，权重为10。
结构伪类选择器 nth-child(n)选择某个父元素的一个或多个特定的子元素 n可以是数字，关键字和公式 n如果是数字，就是选择第n个子元素，里面数字从1开始 n可以是关键字：even偶数，odd奇数 n可以是公式：常见的公式如下（如果n是公式，则从0开始计算，但是第0个元素或者超出了元素的个数会被忽略） 伪元素选择器（重点） 伪元素选择器可以帮助我们利用CSS创建新标签元素而不需要HTML标签，从而简化HTML结构。
CSS3语法一般是双冒号写法 CSS2过时语法是但冒号写法 反斜杠转义 CSS3盒子模型 CSS3中可以通过box-sizeing来指定盒子模型。</description></item><item><title>H5C3 Tips P1-200</title><link>https://c.gregueria.icu/%EF%B8%8Frandom-notes/H5C3-Tips-P1-200/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://c.gregueria.icu/%EF%B8%8Frandom-notes/H5C3-Tips-P1-200/</guid><description>Tips crtl + / 注释 cellpadding=&amp;ldquo;10&amp;quot;单元格边缘和文字之间的距离，cellspacing=&amp;ldquo;0&amp;quot;单元格与单元格之间的空隙 自定义列表，与（定义项目/名字）、（描述每一个项目/名字）一起使用 CSS内容写在head标签里加一个style标签 对body进行选择，background-color整体页面的颜色，color是文字部分的颜色 CSS基础选择器 标签选择器 类选择器 .class，类选择器：样式点定义，结构类调用，一个或多个，开发最常用。不能用标签名字比如.div作为类名 使用多个类名用空格隔开 id选择器，用井号#来定义，结构id调用，**只能调用一次，别人切勿使用。**和Class的区别类似名字和身份证，可以重名但不会有重复的身份证。ID选择器一般用于JS，CSS一般使用类选择器。 通配符选择器，星号*，选择所有标签 符合属性的写法，font: font-style font-weitgh font-size/line-height font-family; 不能换顺序 开发中最常用的是十六进制颜色 em是一个相对单位，就是当前元素（font-size）1个文字的大小，如果当前元素没有设置大小，就会按照父元素的一个文字大小 CSS引入方式 CSS三种样式表 行内样式表（行内式） 直接在标签内写一个style属性 内部样式表（嵌入式） 可以放在HTML文档中的任何地方，但一般写在之中 通过这种方式可以方便控制整个页面中的元素样式设置 代码结构清晰，但是并没有实现结构与样式的完全分离 外部样式表（链接式） &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;styles/style.</description></item><item><title>Ignoring Notes</title><link>https://c.gregueria.icu/notes/ignore-notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://c.gregueria.icu/notes/ignore-notes/</guid><description>Quartz Ignore Edit ignoreFiles in config.toml to include paths you&amp;rsquo;d like to exclude from being rendered.
1 2 3 4 5 6 ... ignoreFiles = [ &amp;#34;/content/templates/*&amp;#34;, &amp;#34;/content/private/*&amp;#34;, &amp;#34;&amp;lt;your path here&amp;gt;&amp;#34; ] ignoreFiles supports the use of Regular Expressions (RegEx) so you can ignore patterns as well (e.</description></item><item><title>JavaScript内置对象</title><link>https://c.gregueria.icu/%EF%B8%8Frandom-notes/JavaScript%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://c.gregueria.icu/%EF%B8%8Frandom-notes/JavaScript%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/</guid><description> JS中的对象分为三种：自定义对象、内置对象、浏览器对象。</description></item><item><title>Loop 循环</title><link>https://c.gregueria.icu/%EF%B8%8Frandom-notes/Loop-%E5%BE%AA%E7%8E%AF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://c.gregueria.icu/%EF%B8%8Frandom-notes/Loop-%E5%BE%AA%E7%8E%AF/</guid><description>for 1 2 3 for (初始化变量; 条件表达式; 操作表达式) { //循环体 } 初始化变量就是用var生命的一个普通变量，通常用于作为计数器使用 条件表达式就是用来决定每一次循环是否继续执行，就是终止的条件 操作表达式 是每次循环最后执行的代码，经常用于我们计数器变量进行更新（递增或者递减） 1 2 3 for (var i = 1; i &amp;lt;= 100; i++) { console.log(&amp;#39;hello&amp;#39;) } 首先执行里面的计数器变量 var i = 1但是这句话在for里面只执行一次，i是index的意思。 去i&amp;lt;=100来判断是否满足条件，满足执行循环体，不满足结束 最后去执行 i++ 第一轮结束 接着去执行i&amp;lt;=100 执行不同的代码 1 2 3 4 5 6 7 8 9 for (var i = 1; i &amp;lt;= 100; i++) { if (i == 1) { console.</description></item><item><title>Object 对象</title><link>https://c.gregueria.icu/%EF%B8%8Frandom-notes/Object-%E5%AF%B9%E8%B1%A1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://c.gregueria.icu/%EF%B8%8Frandom-notes/Object-%E5%AF%B9%E8%B1%A1/</guid><description>键值对 property:value
Key Point 和Array最大的差别在于，Object中属性顺序不重要，Array的顺序非常重要，因为它是我们访问元素的方式 用法 1 2 3 4 5 6 7 8 9 10 var xiaoming = { name: &amp;#39;小明&amp;#39;, birth: 1990, school: &amp;#39;No.1 Middle School&amp;#39;, height: 1.70, weight: 65, score: null }; xiaoming.name; // &amp;#39;小明&amp;#39; xiaoming.</description></item><item><title>Quartz Philosophy</title><link>https://c.gregueria.icu/notes/philosophy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://c.gregueria.icu/notes/philosophy/</guid><description>“[One] who works with the door open gets all kinds of interruptions, but [they] also occasionally gets clues as to what the world is and what might be important.” — Richard Hamming
Why Quartz? Hosting a public digital garden isn&amp;rsquo;t easy.</description></item><item><title>Scope 作用域</title><link>https://c.gregueria.icu/%EF%B8%8Frandom-notes/Scope-%E4%BD%9C%E7%94%A8%E5%9F%9F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://c.gregueria.icu/%EF%B8%8Frandom-notes/Scope-%E4%BD%9C%E7%94%A8%E5%9F%9F/</guid><description>Scope 作用域 JS作用域：变量在某个范围内起作用和效果，目的是为了提高程序的可靠性，减少命名冲突。 全局作用域：整个&amp;lt;script&amp;gt;标签，或者是一个单独的JS文件。 局部作用域：在函数内部就是局部作用域，只在函数内部其效果和作用。 变量作用域 全局变量：全局作用域下的变量。如果在函数内部没有声明直接赋值的变量也属于全局变量。 局部变量：在局部作用域下的变量，只能在函数内部使用。函数的形参也可以看作是局部变量 从执行效率来看变量作用域 全局变量只有浏览器关闭时才销毁，占内存资源 局部变量当程序执行完毕就会销毁，节约内存资源 [[🖼️random notes/Block area 块作用域]] Scope chain 作用域链 根据内部函数可以访问外部函数变量的这种机制，用链式查找决定哪些数据能被内部函数访问，就成为作用域链。</description></item><item><title>Search</title><link>https://c.gregueria.icu/notes/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://c.gregueria.icu/notes/search/</guid><description>Quartz supports two modes of searching through content.
Full-text Full-text search is the default in Quartz. It produces results that exactly match the search query. This is easier to setup but usually produces lower quality matches.
1 2 # the default optionenableSemanticSearch:false Natural Language Natural language search is powered by Operand.</description></item><item><title>Showcase</title><link>https://c.gregueria.icu/notes/showcase/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://c.gregueria.icu/notes/showcase/</guid><description>Want to see what Quartz can do? Here are some cool community gardens :)
Quartz Documentation (this site!) Jacky Zhao&amp;rsquo;s Garden Scaling Synthesis - A hypertext research notebook AWAGMI Intern Notes Shihyu&amp;rsquo;s PKM Chloe&amp;rsquo;s Garden SlRvb&amp;rsquo;s Site Course notes for Information Technology Advanced Theory Brandon Boswell&amp;rsquo;s Garden Siyang&amp;rsquo;s Courtyard If you want to see your own on here, submit a Pull Request adding yourself to this file!</description></item><item><title>The complete JavaScript Course 2022</title><link>https://c.gregueria.icu/%EF%B8%8Frandom-notes/The-complete-JavaScript-Course-2022/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://c.gregueria.icu/%EF%B8%8Frandom-notes/The-complete-JavaScript-Course-2022/</guid><description>7 Primitive Data Types Number String 字符串 Boolean：TrueorFalse Undefined：Value taken by a variable that is not yet defined(&amp;rsquo;empty value') Null: Also means &amp;rsquo;empty value' Symbol（ES2015）：Value that is unique and cannot be changed[Not useful for now] BigInt（ES2020）：Larger integers than the Number type can hole var let const let &amp;amp; var 使用 var 关键字声明变量的最大问题之一是你可以轻松覆盖变量声明：</description></item><item><title>Troubleshooting and FAQ</title><link>https://c.gregueria.icu/notes/troubleshooting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://c.gregueria.icu/notes/troubleshooting/</guid><description>Still having trouble? Here are a list of common questions and problems people encounter when installing Quartz.
While you&amp;rsquo;re here, join our Discord :)
Does Quartz have Latex support? Yes! See CJK + Latex Support (测试) for a brief demo.</description></item><item><title>Updating</title><link>https://c.gregueria.icu/notes/updating/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://c.gregueria.icu/notes/updating/</guid><description>Haven&amp;rsquo;t updated Quartz in a while and want all the cool new optimizations? On Unix/Mac systems you can run the following command for a one-line update! This command will show you a log summary of all commits since you last updated, press q to acknowledge this.</description></item><item><title>📗 Quartz安装笔记</title><link>https://c.gregueria.icu/%EF%B8%8Frandom-notes/-Quartz%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://c.gregueria.icu/%EF%B8%8Frandom-notes/-Quartz%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/</guid><description>前段时间在象上刷到 Quartz，算是一个支持Obsidian双链玩法的博客？点了收藏之后今天适逢周六，刚好呢又到了晚上十一点（人家的一个不干正事又不打算睡觉的时间），虽然呢也没有什么笔记要整理，但是就是看到漂亮的东西想试一试。搭建并不算难，而且很漂亮！于是来写一下笔记记录过程。
第一步：BGM - In Motion启动！Let the hacking begin！
首先来讲一下我对Quartz的使用感受。它的框架也是基于Hugo啦，这直接降低了我的心理负担，因为算是一个很熟悉的东西。
它默认支持：
搜索 本地预览 夜间模式 文章目录（可以修改层级和目录序号的显示） 支持Obsidian的双链玩法，直接打开Obsidian就写！无痛保存！ 最近的文章 文章Tag Front-Matter（这好像并不是必须的） 但是它的缺点是本身并不支持归档（Archive）的功能。于是作为归档功能的替代，在此隆重向大家介绍我用Obsidian时常用的MOC（Map of Content），算是一种整理思路。轻轻地推荐这篇最早让我了解到Map of Content的一篇文章： Obsidian · 网课学习笔记整理 From Seviche.cc。
其实概括而谈MOC就是放弃用Obsidian本身的文件夹功能给笔记归类（并非必要，只是我很懒得整理），直接建立一个索引页，里面用双链功能创建文章，索引页就像归档或总目录一样，带你去任何一页笔记。
而Quartz的使用完全适配这种笔记管理思路，在Quartz中，_index.md文件就是博客主页，可以被任意编写，因此可以作为索引/文章目录页使用。
注意：我基本没有什么计算机基础，以下内容不保真！有疑问的话建议去原作者的仓库底下提Issue :D
你需要有些什么 Github账号 Go 环境(&amp;gt;= 1.</description></item></channel></rss>