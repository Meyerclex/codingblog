<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>JavaScript on</title><link>https://c.gregueria.icu/tags/JavaScript/</link><description>Recent content in JavaScript on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://c.gregueria.icu/tags/JavaScript/index.xml" rel="self" type="application/rss+xml"/><item><title>Array 数组</title><link>https://c.gregueria.icu/Array-%E6%95%B0%E7%BB%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://c.gregueria.icu/Array-%E6%95%B0%E7%BB%84/</guid><description>Array.push('') 加一个元素在数组的末尾。同时它可以返回一些数值：它返回的数值是新数组的长度。 1 2 3 const friends = [&amp;#39;tim&amp;#39;, &amp;#39;allen&amp;#39;, &amp;#39;bob&amp;#39;] const newLength = friends.push(&amp;#39;kim&amp;#39;) console.log(newLength) // 4 Array.unshift('') 添加一个元素在数组的开头。同样返回新数组的长度。 Array.pop('') 删除数组最后一个元素，返回被删除的值 Array.shift('') 删除数组第一个元素，并返回被删除的值 Array.</description></item><item><title>Block area 块作用域</title><link>https://c.gregueria.icu/Block-area-%E5%9D%97%E4%BD%9C%E7%94%A8%E5%9F%9F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://c.gregueria.icu/Block-area-%E5%9D%97%E4%BD%9C%E7%94%A8%E5%9F%9F/</guid><description>在 ES5 中规定，函数只能在顶层作用域和函数作用域之中声明，不能在块级作用域声明。而在 ES6 中引入了块级作用域，允许函数可以在块级作用域中声明。块级作用域之中，函数声明语句的行为类似于 let，在块级作用域之外不可引用。 通过var声明的变量或者非严格模式下 (non-strict mode) 创建的函数声明没有块级作用域。 相比之下，使用 let和 const声明的变量是有块级作用域的。 示例： 1 2 3 4 5 let x = 1; { let x = 2; } console.log(x); // 输出 1 x = 2仅限在定义它的块中，const的结果也是一样的。</description></item><item><title>Date object 时间对象</title><link>https://c.gregueria.icu/Date-object-%E6%97%B6%E9%97%B4%E5%AF%B9%E8%B1%A1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://c.gregueria.icu/Date-object-%E6%97%B6%E9%97%B4%E5%AF%B9%E8%B1%A1/</guid><description>在代码中发现了new关键字时，一般讲这个操作成为实例化 创建一个时间对象并获取时间：let date = new Date() Date日期对象 Date是一个构造函数，因此需要用new来调用创建。若将它作为常规函数调用（即不加new操作符），将返回一个字符串，而非 Date 对象。
1 2 3 4 new Date(); new Date(value); new Date(dateString); // new Date(&amp;#39;2019-5-1&amp;#39;)或new Date(&amp;#39;2019/5/1&amp;#39;) new Date(year, monthIndex [, day [, hours [, minutes [, seconds [, milliseconds]]]]]); 如果不加参数则返回当前系统的当前时间。</description></item><item><title>Function 函数</title><link>https://c.gregueria.icu/Function-%E5%87%BD%E6%95%B0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://c.gregueria.icu/Function-%E5%87%BD%E6%95%B0/</guid><description>什么是函数 函数：封装了一段可被重复调用执行的代码块。通过此代码块可以实现大量代码的重复使用。 封装：吧一个或多个功能通过函数的方式封装起来，对外只提供一个简单的函数接口。 1 2 3 4 5 6 //声明函数 function 函数名(参数1, 参数2) { //函数体 } //调用函数 函数名(参数1, 参数2) age is the variable to save returned value(function output)
函数声明 1 function fnName () {…}; 使用function关键字声明一个函数，再指定一个函数名，叫函数声明。</description></item><item><title>JavaScript内置对象</title><link>https://c.gregueria.icu/JavaScript%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://c.gregueria.icu/JavaScript%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/</guid><description>JS中的对象分为三种：自定义对象、内置对象、浏览器对象。 Math 数学对象 Math不是一个构造函数，不需要用new来调用，而是直接使用里面的属性。具有数学常数和函数的属性和方法，跟数学有关的运算可以使用Math里的成员。
常用的Math Math.PI 圆周率 Math.floor() 向下取整 Math.ceil() 向上取整 Math.round() 四舍五入版就近取正，但-3.5会取值-3 Math.abs() 绝对值 Math.max() / Math.min() 求最大和最小值 得到一个两数之间的随机整数，包括两个数在内 1 2 3 4 5 function getRandomIntInclusive(min, max) { min = Math.ceil(min); max = Math.</description></item><item><title>Loop 循环</title><link>https://c.gregueria.icu/Loop-%E5%BE%AA%E7%8E%AF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://c.gregueria.icu/Loop-%E5%BE%AA%E7%8E%AF/</guid><description>for 1 2 3 for (初始化变量; 条件表达式; 操作表达式) { //循环体 } 初始化变量就是用var生命的一个普通变量，通常用于作为计数器使用 条件表达式就是用来决定每一次循环是否继续执行，就是终止的条件 操作表达式 是每次循环最后执行的代码，经常用于我们计数器变量进行更新（递增或者递减） 1 2 3 for (var i = 1; i &amp;lt;= 100; i++) { console.log(&amp;#39;hello&amp;#39;) } 首先执行里面的计数器变量 var i = 1但是这句话在for里面只执行一次，i是index的意思。 去i&amp;lt;=100来判断是否满足条件，满足执行循环体，不满足结束 最后去执行 i++ 第一轮结束 接着去执行i&amp;lt;=100 执行不同的代码 1 2 3 4 5 6 7 8 9 for (var i = 1; i &amp;lt;= 100; i++) { if (i == 1) { console.</description></item><item><title>Object 对象</title><link>https://c.gregueria.icu/Object-%E5%AF%B9%E8%B1%A1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://c.gregueria.icu/Object-%E5%AF%B9%E8%B1%A1/</guid><description>键值对 property:value
Key Point 和Array最大的差别在于，Object中属性顺序不重要，Array的顺序非常重要，因为它是我们访问元素的方式 用法 1 2 3 4 5 6 7 8 9 10 var xiaoming = { name: &amp;#39;小明&amp;#39;, birth: 1990, school: &amp;#39;No.1 Middle School&amp;#39;, height: 1.70, weight: 65, score: null }; xiaoming.name; // &amp;#39;小明&amp;#39; xiaoming.</description></item><item><title>Scope 作用域</title><link>https://c.gregueria.icu/Scope-%E4%BD%9C%E7%94%A8%E5%9F%9F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://c.gregueria.icu/Scope-%E4%BD%9C%E7%94%A8%E5%9F%9F/</guid><description>Scope 作用域 JS作用域：变量在某个范围内起作用和效果，目的是为了提高程序的可靠性，减少命名冲突。 全局作用域：整个&amp;lt;script&amp;gt;标签，或者是一个单独的JS文件。 局部作用域：在函数内部就是局部作用域，只在函数内部其效果和作用。 变量作用域 全局变量：全局作用域下的变量。如果在函数内部没有声明直接赋值的变量也属于全局变量。 局部变量：在局部作用域下的变量，只能在函数内部使用。函数的形参也可以看作是局部变量 从执行效率来看变量作用域 全局变量只有浏览器关闭时才销毁，占内存资源 局部变量当程序执行完毕就会销毁，节约内存资源 [[Block area 块作用域]] Scope chain 作用域链 根据内部函数可以访问外部函数变量的这种机制，用链式查找决定哪些数据能被内部函数访问，就成为作用域链。</description></item><item><title>sort()排序</title><link>https://c.gregueria.icu/sort%E6%8E%92%E5%BA%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://c.gregueria.icu/sort%E6%8E%92%E5%BA%8F/</guid><description>sort()函数比较的是ASCII码的大小，而且：Array的sort()方法默认把所有元素先转换为String再排序，所以就有以下问题： 1 2 3 4 // baiDu排在了最后: [&amp;#39;Google&amp;#39;, &amp;#39;baiDu&amp;#39;, &amp;#39;Facebook&amp;#39;].sort(); // [&amp;#39;Facebook&amp;#39;, &amp;#39;Google&amp;#34;, &amp;#39;baiDu&amp;#39;] [10, 20, 1, 2].sort(); // [1, 10, 2, 20] 正确写法： 1 2 3 4 5 6 7 8 9 10 11 12 var numbers = [4, 2, 5, 1, 3]; numbers.</description></item><item><title>The complete JavaScript Course 2022</title><link>https://c.gregueria.icu/The-complete-JavaScript-Course-2022/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://c.gregueria.icu/The-complete-JavaScript-Course-2022/</guid><description>7 Primitive Data Types Number String 字符串 Boolean：TrueorFalse Undefined：Value taken by a variable that is not yet defined(&amp;rsquo;empty value') Null: Also means &amp;rsquo;empty value' Symbol（ES2015）：Value that is unique and cannot be changed[Not useful for now] BigInt（ES2020）：Larger integers than the Number type can hole var let const let &amp;amp; var 使用 var 关键字声明变量的最大问题之一是你可以轻松覆盖变量声明：</description></item><item><title>Web APIs</title><link>https://c.gregueria.icu/Web-APIs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://c.gregueria.icu/Web-APIs/</guid><description>Web APIs 作用：使用JS去操作html和浏览器 分类：DOM（文档对象模型）、BOM（浏览器对象模型） DOM：用来呈现以及与任意html或xml文档交互的API，用来开发网页内容特效和实现用户交互。 DOM树：将HTML文档以树状结构直观表现出来，我们称之为文档树或DOM树，描述王爷关系内容的名字，直观地体现了标签与标签之间的关系。 DOM对象：浏览器根据html标签生成的JS对象。所有标签属性都可以在这个对象上面找到，修改这个对象的属性会自动映射到标签身上。核心在于把网页内容当作对象来处理。 document对象：是DOM里提供的一个对象，所以它提供的属性和方法都是用来访问和操作页面内容的（例如：document.write()）王爷所有内容都在document里。 获取DOM对象 根据CSS先择起来获取DOM元素 选择匹配的第一个元素 语法：document.querySelector('css选择器') 参数：包含一个或多个有效的CSS选择器（字符串） 返回值：CSS选择器匹配的第一个元素，一个HTMLelement对象。如果没有匹配到则返回null。 选择匹配的多个元素 语法：document.querySelectorAll('css选择器') 参数：包含一个或多个有效的CSS选择器 返回值：CSS选择器匹配的NodeList（对象集合） 最终得到是一个伪数组：想得到里面的每一个对象，需要进行遍历（for）获得。具有length属性、按索引方式存储数据、不具有数组的push、pop等方法。 不管有几个标签，querySelectorAll得到的都是数组 其他获取DOM元素方法 根据id获取一个元素：document.getElementById('') 根据标签获取一雷元素，获取页面所有div：document.getElementByTagName('') 根据类名获取元素，获取页面所有类名为w的：document.getElementByClassName('w') 设置/修改DOM元素内容 document.</description></item><item><title>Window对象</title><link>https://c.gregueria.icu/Window%E5%AF%B9%E8%B1%A1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://c.gregueria.icu/Window%E5%AF%B9%E8%B1%A1/</guid><description> BOM(Browser Object Model ) 是浏览器对象模型 window 是浏览器内置中的全局对象，我们所学习的所有 Web APIs 的知识内容都是基于 window 对象实现的 window 对象下包含了 navigator、location、document、history、screen 5个属性，即所谓的 BOM （浏览器对象模 型） document 是实现 DOM 的基础，它其实是依附于 window 的属性。 注：依附于 window 对象的所有属性和方法，使用时可以省略 window 定时器-延时函数</description></item><item><title>显示转换与隐式转换</title><link>https://c.gregueria.icu/%E6%98%BE%E7%A4%BA%E8%BD%AC%E6%8D%A2%E4%B8%8E%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://c.gregueria.icu/%E6%98%BE%E7%A4%BA%E8%BD%AC%E6%8D%A2%E4%B8%8E%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2/</guid><description>算数表达式中的隐式转换 递增递减++ &amp;ndash;，一元加减+a -a，乘* 除/ 求余%，隐式转换为Number
1 2 3 console.log(4 * &amp;#39;3&amp;#39;);//12 只做数值类型的转换 console.log(4 * []);// 0 []转换为0 console.log(4 * [1,2]);// NaN [1,2]会转换为NaN 相当于4*NaN=NaN JavaScript之显示转换与隐式转换 - 掘金</description></item></channel></rss>