<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Vue on</title><link>https://c.gregueria.icu/tags/Vue/</link><description>Recent content in Vue on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://c.gregueria.icu/tags/Vue/index.xml" rel="self" type="application/rss+xml"/><item><title>key作用原理</title><link>https://c.gregueria.icu/key%E4%BD%9C%E7%94%A8%E5%8E%9F%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://c.gregueria.icu/key%E4%BD%9C%E7%94%A8%E5%8E%9F%E7%90%86/</guid><description> 面试题：reactvue中的key有什么作用？（key的内部原理）
虚拟DOM中key的作用：key是虚拟DOM中对象的标识，当数据发生变化时，Vue会根据新数据生成新的虚拟DOM，随后Vue进行新虚拟DOM与旧虚拟DOM的差异比较，比较规则如下 对比规则 旧虚拟DOM中找到了与新虚拟DOM相同的key
ⅰ. 若虚拟DOM中内容没变, 直接使用之前的真实DOM
ⅱ. 若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM 旧虚拟DOM中未找到与新虚拟DOM相同的key 创建新的真实DOM，随后渲染到到页面 用index作为key可能会引发的问题 若对数据进行逆序添加、逆序删除等破坏顺序操作，会产生没有必要的真实DOM更新 ==&amp;gt; 界面效果没问题，但效率低 若结构中还包含输入类的DOM：会产生错误DOM更新 ==&amp;gt; 界面有问题 开发中如何选择key？ 最好使用每条数据的唯一标识作为key，比如 id、手机号、身份证号、学号等唯一值 如果不存在对数据的逆序添加、逆序删除等破坏顺序的操作，仅用于渲染列表，使用index作为key是没有问题的</description></item><item><title>v-if和v-show</title><link>https://c.gregueria.icu/v-if%E5%92%8Cv-show/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://c.gregueria.icu/v-if%E5%92%8Cv-show/</guid><description>真则显示，假则隐藏。</description></item><item><title>v-on指令</title><link>https://c.gregueria.icu/v-on%E6%8C%87%E4%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://c.gregueria.icu/v-on%E6%8C%87%E4%BB%A4/</guid><description/></item><item><title>Vue</title><link>https://c.gregueria.icu/Vue/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://c.gregueria.icu/Vue/</guid><description> [[事件处理]] [[侦听属性]] [[key作用原理]] [[基础指令]] [[Vue数据监测]]</description></item><item><title>Vue数据监测</title><link>https://c.gregueria.icu/Vue%E6%95%B0%E6%8D%AE%E7%9B%91%E6%B5%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://c.gregueria.icu/Vue%E6%95%B0%E6%8D%AE%E7%9B%91%E6%B5%8B/</guid><description> Vue会监视data中所有层次的数据 如何检测对象中的数据？ 通过setter实现监测，且要在new Vue时旧传入要监测的数据 对象中后追加的属性，Vue默认不做响应式处理 如需给后添加的属性做响应式，使用Vue.set或vm.$set 如何检测数组中的数据？ 通过包裹数组更新元素的方法实现，本质就是做了： 调用原生对应方法（push、splice等七个，不包括filter）对数组进行更新 重新解析模板，进而更新页面 在Vue修改数组中的某个元素一定要用如下方法 push()、splice()等API，使用filter时 替换数组。 Vue.set、vm.$set Vue.set或vm.$set不能给vm或vm的根数据对象添加属性。</description></item><item><title>侦听属性</title><link>https://c.gregueria.icu/%E4%BE%A6%E5%90%AC%E5%B1%9E%E6%80%A7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://c.gregueria.icu/%E4%BE%A6%E5%90%AC%E5%B1%9E%E6%80%A7/</guid><description>computed计算属性 定义：要用的属性不存在，需要通过已有属性计算得来 原理：底层借助了Objcet.defineproperty()方法提供的getter和setter get函数什么时候执行？ 初次读取时会执行一次 当依赖的数据发生改变时会被再次调用 优势：与methods实现相比，内部有缓存机制（复用），效率更高，调试方便 备注 计算属性最终会出现在vm上，直接读取使用即可 如果计算属性要被修改，那必须写set函数去响应修改，且set中要引起计算时依赖的数据发生改变 如果计算属性确定不考虑修改，可以使用计算属性的简写形式</description></item><item><title>基础指令</title><link>https://c.gregueria.icu/%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://c.gregueria.icu/%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4/</guid><description>[[v-on指令]] [[v-if和v-show]] v-for v-for=&amp;quot;item in arr&amp;quot;
v-model 获取和设置表单元素的值，双向数据绑定。
.set() 在未定义gender变量时，插值{{gender}}报错，{{student.gender}}undefined。 vm._data.student.gender = 'male'，不能直接响应到页面上，因为缺少setter和getter。
可以使用Vue.set(target, key, val)这个API添加。
示例：Vue.set(vm._data.student, 'gender', 'male')</description></item><item><title>数据代理</title><link>https://c.gregueria.icu/%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://c.gregueria.icu/%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86/</guid><description>数据代理：通过一个对象代理对另一个对象中属性的操作
1 2 3 4 5 6 7 8 9 10 let obj = {x:100} let obj2 = {y:200} Object.defineProperty(obj2, &amp;#39;x&amp;#39;, { get() { return obj.x } set(value) { obj.x = value } })</description></item><item><title>键盘事件</title><link>https://c.gregueria.icu/%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://c.gregueria.icu/%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/</guid><description> [[数据代理]] 事件修饰符 Vue中的事件修饰符
prevent 阻止默认事件（常用） occlusive 阻止事件冒泡（常用） once 事件只触发一次（常用） capture 使用事件的捕获模式 self 只有event.target是当前操作的元素时才触发事件 passive 事件的默认行为立即执行，无需等待事件回调执行完毕 修饰符可以连续写，比如可以这么用：@click.prevent.stop=&amp;quot;showInfo&amp;quot; 键盘事件 键盘上的每个按键都有自己的名称和编码，例如：Enter（13）。而Vue还对一些常用按键起了别名方便使用 Vue中常用的按键别名 回车enter 删除delete捕获“删除”和“退格”键 退出esc 空格space 换行tab特殊，必须配合keydown去使用 上up 下down 左left 右right</description></item></channel></rss>